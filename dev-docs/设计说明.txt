简要业务逻辑设计说明和数据库设计说明

一、设计说明：
1、每个用户可以注册，然后登录网站。
2、一个用户可以创建组织，项目，测试用例，测试步骤，测试计划，测试用例结果，测试步骤结果
3、一个用户可以加入其他组织和项目，但需要经过审批
4、一个组织下可以有多个项目，设计用“RepoInOrg组织中的项目表”存储，未确定是否合理？
5、一个项目下可以有很多个测试用例
6、一个测试用例下可以有很多测试步骤
7、针对一个项目下的所有测试用例，选出子集（可以是一个，也可以是全部，也可以根据Area，或者Category，Tag筛选出），基于这个子集，建立一个测试计划
8、每个测试计划下很多个测试用例结果，每一个测试用例结果下有很多个测试步骤结果，这些数据都在测试计划被建立时存入数据库，后续的结果只需让用户更新表中的相应字段就可以。

二、未确定疑问或者业务逻辑有问题或者未考虑充分：
repo应该修改为project？
TestExecution应该修改为TestPlan？
用户权限未设计好！

三、详细数据库表说明
CREATE TABLE Org (orgid INT NOT NULL AUTO_INCREMENT, orgname VARCHAR(300), adminid INT NOT NULL, RegisterDate DATETIME, PRIMARY KEY ( orgid ));
Org组织表
orgname组织名称
adminid组织管理员编号
RegisterDate注册日期

CREATE TABLE Repo (repoid INT NOT NULL AUTO_INCREMENT, reponame VARCHAR(300), adminid INT NOT NULL,ishide CHAR(1), RegisterDate DATETIME, PRIMARY KEY ( repoid ));
Repo仓库编号/项目编号
reponame仓库名称/项目编号
adminid项目管理员编号
ishide是否隐藏（私有）
RegisterDate注册日期

CREATE TABLE User (uid INT NOT NULL AUTO_INCREMENT, uname VARCHAR(300), passwd VARCHAR(300), email VARCHAR(300), RegisterDate DATETIME, PRIMARY KEY ( uid ));
User用户表
uname用户名
passwd密码
email
RegisterDate

CREATE TABLE JoinRepo (id INT NOT NULL AUTO_INCREMENT, uid INT NOT NULL, repoid INT NOT NULL, IsApproved CHAR(1), JoinDate DATETIME, PRIMARY KEY ( id ));
JoinRepo用户加入项目表
uid用户编号
repoid项目编号
IsApproved是否已批准
JoinDate加入时间

CREATE TABLE TestCase (tcid INT NOT NULL AUTO_INCREMENT, tctitle VARCHAR(1000), priority INT NOT NULL, serverity INT NOT NULL, repoid INT NOT NULL, area VARCHAR(100), category VARCHAR(100), tag VARCHAR(100), CreateDate DATETIME, PRIMARY KEY ( tcid ));
TestCase测试用例
tctitle用例标题
priority优先级：1，2，3，4
serverity严重级别：1，2，3，4
repoid项目编号
area区域，领域，范围
category分类，类别
tag标签
CreateDate创建时间

CREATE TABLE Steps (sid INT NOT NULL AUTO_INCREMENT, content VARCHAR(1000), tcid INT NOT NULL, PRIMARY KEY ( sid ));
Steps测试步骤表
sid测试步骤编号
content步骤内容
tcid所属测试用例编号

CREATE TABLE TestExcution (teid INT NOT NULL AUTO_INCREMENT, tename VARCHAR(300),milestone VARCHAR(300), CreateDate DATETIME, PRIMARY KEY ( teid ));
TestExcution测试计划，执行新测试
tename测试计划名称
milestone里程碑
CreateDate创建时间

CREATE TABLE TestResult (trid INT NOT NULL AUTO_INCREMENT, tcid INT NOT NULL, tctitle VARCHAR(1000), status CHAR(4),whorun VARCHAR(300),teid INT NOT NULL,gitissuelink VARCHAR(1000),updatedate DATETIME, PRIMARY KEY ( trid ));
TestResult测试用例结果表
tcid测试用例编号
tctitle测试用例编号
status状态：成功，失败
whorun谁跑的这个测试用例
teid测试计划编号
gitissuelink测试缺陷在GitHub.com上的链接
updatedate更新时间

CREATE TABLE TestStepsResult (id INT NOT NULL AUTO_INCREMENT, sid INT NOT NULL, tcid INT NOT NULL, trid INT NOT NULL, content VARCHAR(1000), status CHAR(4),whorun VARCHAR(300),updatedate DATETIME, PRIMARY KEY ( id ));
TestStepsResult测试步骤结果表
sid测试步骤编号
tcid所属测试用例编号
trid所属测试结果编号
content测试步骤结果内容
status状态：成功，失败
whorun谁跑的这一步测试步骤
updatedate更新时间

CREATE TABLE Area (id INT NOT NULL AUTO_INCREMENT, repoid INT NOT NULL, area VARCHAR(100), PRIMARY KEY ( id ));
Area领域表
repoid项目编号
area领域名

CREATE TABLE Category (id INT NOT NULL AUTO_INCREMENT, repoid INT NOT NULL, category VARCHAR(100), PRIMARY KEY ( id ));
Category类别表
repoid项目编号
category类别编号

CREATE TABLE Tag (id INT NOT NULL AUTO_INCREMENT, repoid INT NOT NULL, tag VARCHAR(100), PRIMARY KEY ( id ));
Tag标签表
repoid项目编号
tag标签名
